apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-autosd-image
spec:
  params:
  - name: playbookGitRepoURL
    description: URL to the git repository of the playbook that should be run.
    type: string
    default: "https://github.com/ygalblum/autosd-build-pipeline.git"
  - name: playbookGitRevision
    description: Git revision of the playbook that should be run.
    type: string
    default: main
  - name: infraPlaybookFilename
    description: Filename of the playbook that should be run for infrastructure setup.
    type: string
    default: infra.yml
  - name: buildPlaybookFilename
    description: Filename of the playbook that should be run for building the image.
    type: string
    default: build.yml
  - name: ansibleUser
    description: Username to login to the VirtualMachine with Ansible.
    type: string
    default: cloud-user
  workspaces:
  - name: ansible
  tasks:
  - name: git-clone
    params:
    - name: url
      value: $(params.playbookGitRepoURL)
    - name: revision
      value: $(params.playbookGitRevision)
    - name: deleteExisting
      value: "true"
    workspaces:
    - name: output
      workspace: ansible
    timeout: 10m
    taskRef:
      kind: ClusterTask
      name: git-clone
  - name: set-extraenv
    params:
    - name: vars
      value:
      - target_namespace="$(context.pipelineRun.namespace)"
      - public_key_secret_name="$(context.pipelineRun.name)-public"
      - private_key_secret_name="$(context.pipelineRun.name)-private"
      - build_machine_name="$(context.pipelineRun.name)"
    taskRef:
      kind: Task
      name: ansible-runner-extravars
    workspaces:
    - name: runner-dir
      workspace: ansible
      subPath: ansible-runner
    runAfter:
    - git-clone
  - name: start-vm
    params:
    - name: project-dir
      value: "."
    - name: args
      value:
      - -p
      - $(params.infraPlaybookFilename)
    workspaces:
    - name: runner-dir
      workspace: ansible
      subPath: ansible-runner
    runAfter:
    - set-extraenv
    timeout: 1h
    taskRef:
      kind: Task
      name: ansible-runner
  - name: create-inventory
    params:
    - name: SCRIPT
      value: |
        #!/usr/bin/env bash
        set -x
        mkdir -p \
          $(workspaces.manifest-dir.path)/env \
          $(workspaces.manifest-dir.path)/inventory
        oc get \
          secret \
          $(context.pipelineRun.name)-private \
          -n $(context.pipelineRun.namespace) \
          -o go-template='{{ index .data "ssh-privatekey" | base64decode }}' \
          > $(workspaces.manifest-dir.path)/env/ssh_key
        sed -i -e '$a\' $(workspaces.manifest-dir.path)/env/ssh_key
        oc get \
          vmi \
          $(context.pipelineRun.name) \
          -n $(context.pipelineRun.namespace) \
          -o go-template='vm ansible_user=$(params.ansibleUser) ansible_host={{ index (index .status.interfaces 0) "ipAddress" }}' \
          > $(workspaces.manifest-dir.path)/inventory/hosts
    workspaces:
    - name: manifest-dir
      workspace: ansible
      subPath: ansible-runner-build
    runAfter:
    - start-vm
    timeout: 10m
    taskRef:
      kind: ClusterTask
      name: openshift-client
  - name: build-image
    params:
    - name: project-dir
      value: "."
    - name: args
      value:
      - -p
      - $(params.buildPlaybookFilename)
    workspaces:
    - name: runner-dir
      workspace: ansible
      subPath: ansible-runner-build
    runAfter:
    - create-inventory
    timeout: 1h
    taskRef:
      kind: Task
      name: ansible-runner
